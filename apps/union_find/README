  Copyright(C) 2018, Institute for Defense Analyses
  4850 Mark Center Drive, Alexandria, VA; 703-845-2500
  This material may be reproduced by or for the US Government
  pursuant to the copyright license under the clauses at DFARS
  252.227-7013 and 252.227-7014.
 
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the copyright holder nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.
 
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  COPYRIGHT HOLDER NOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.

***************************************************************************
***************************************************************************

This is a directory for a future application called union_find. Here
is a description of that application. It takes in a very sparse graph
(represented as a symmetrix adjacency matrix) and finds the components
of the graph. What counts as "finding the components" is up for
discussion, but it must be "easy" to query any vertex in the graph and
find out which component it lives in. After this initial computation,
waves of new edges are added to the graph and the components must be
updated. Whether these edges are added synchronously or asynchronously
is also up for discussion. We imagine it would be easier to consider
them coming in synchronous waves -- a batch of edges arrives, the
components are updated before the next batch arrives.